//package controller;
//
///*
// * To change this license header, choose License Headers in Project Properties.
// * To change this template file, choose Tools | Templates
// * and open the template in the editor.
// */
//
//import entity.FileReader;
//import entity.Point;
//import org.graphstream.graph.Edge;
//import org.graphstream.graph.Node;
//import org.graphstream.graph.implementations.MultiGraph;
//import org.graphstream.ui.swing_viewer.SwingViewer;
//import org.graphstream.ui.swing_viewer.ViewPanel;
//import org.graphstream.ui.view.Viewer;
//
//import java.awt.*;
//import java.awt.event.KeyEvent;
//import java.io.*;
//import java.util.*;
//import java.util.List;
//import javax.swing.*;
//
///**
// *
// * @author admin
// */
//public class GUI extends javax.swing.JFrame {
//
//
//    public GUI() {
//        initComponents();
//    }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    int maxNode;
//    static String temp;
//    static int NumberNode = 0;
//    static int MAXN = 10000005;
//    static Point point[] = new Point[MAXN];
//    static int trace[] = new int[MAXN];
//    static List<List<Integer>> Path= new ArrayList<>();
//    static List<Integer> Save = new ArrayList<>();
//    static List<Integer> paths = new ArrayList<>();
//    static String filename=null;
//    List<Integer> suggest;
//    static Scanner myReader;
//    org.graphstream.graph.Graph graph = new MultiGraph("main graph");
//    static Map<Integer,List<Integer>> map= new HashMap<>();
//    static String style="stroke-mode: plain;shape:circle;fill-color: yellow;size: 20px; text-alignment: center;";
//
//    static void convert(String s) {
//        int index = 0, node, next;
//        String string = "";
//        while (s.charAt(index) != ' ')
//            string += s.charAt(index++);
//        node = Integer.parseInt(string);
//        NumberNode = Math.max(NumberNode, node);
//        string = "";
//        ++index;
//        // point[node]= new Point(node);
//
//        while (index <= s.length()) {
//            if (index == s.length() || s.charAt(index) == ' ') {
//                next = Integer.parseInt(string);
//                NumberNode = Math.max(NumberNode, next);
//                point[node].getList().add(next);
//                ++index;
//                string = "";
//                continue;
//            }
//            string += s.charAt(index++);
//        }
//        Collections.sort(point[node].getList());
//    }
//    static void Trace(int index) {
//        ArrayList<Integer> path = new ArrayList<Integer>();
//        while (true) {
//            // System.out.print(index+ " ");
//            path.add(index);
//            index = trace[index];
//            if (index == 1)
//                break;
//        }
//        // System.out.println(1);
//        path.add(1);
//        Collections.reverse(path);
//        Path.add(path);
//    }
//
//    static void DFS(int index) {
//        if (index == NumberNode) {
//            Trace(NumberNode);
//            return;
//        }
//
//        for (Integer node : point[index].getList()) {
//            if (trace[node] != 0)
//                continue;
//            trace[node] = index;
//            DFS(node);
//            trace[node] = 0;
//        }
//    }
//    //
//    static boolean Comparable(int middle) {
//        paths = Path.get(middle);
//        for (int index = 0; index < Save.size(); index++)
//        {
//            if (Save.get(index) < paths.get(index))
//                return false;
//            if (Save.get(index) > paths.get(index))
//                return true;
//        }
//        return false;
//    }
//
//    static boolean ReComparable(int middle) {
//        paths = Path.get(middle);
//        for (int index = 0; index < Save.size(); index++)
//        {
//            if (Save.get(index) > paths.get(index))
//                return false;
//            if (Save.get(index) < paths.get(index))
//                return true;
//        }
//        return false;
//    }
//    @SuppressWarnings("unchecked")
//    private void initComponents() {
//
//        nodeTravel = new javax.swing.JPanel();
//        jPanel4 = new javax.swing.JPanel();
//        browseFile = new javax.swing.JLabel();
//        displayGraph = new javax.swing.JLabel();
//        findingRoutes = new javax.swing.JLabel();
//        jLabel4 = new javax.swing.JLabel();
//        suggesttionField = new javax.swing.JTextField();
//        jLabel5 = new javax.swing.JLabel();
//        inputNodeField = new javax.swing.JTextField();
//        jButton1 = new javax.swing.JButton();
//        jButton2 = new javax.swing.JButton();
//        jLabel1 = new javax.swing.JLabel();
//        jTextField3 = new javax.swing.JTextField();
//        member = new javax.swing.JLabel();
//
//        setBackground(new java.awt.Color(59, 55, 64));
//        setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
//
//        nodeTravel.setBackground(new java.awt.Color(60, 33, 94));
//        nodeTravel.setForeground(new java.awt.Color(59, 55, 64));
//
//        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
//        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
//
//        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
//        jPanel4.setLayout(jPanel4Layout);
//        jPanel4Layout.setHorizontalGroup(
//                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGap(0, 819, Short.MAX_VALUE)
//        );
//        jPanel4Layout.setVerticalGroup(
//                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGap(0, 0, Short.MAX_VALUE)
//        );
//
//        browseFile.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        browseFile.setForeground(new java.awt.Color(255, 255, 255));
//        browseFile.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\opened_folder_30px.png")); // NOI18N
//        browseFile.setText("Browse File");
//        browseFile.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                browseFileMouseClicked(evt);
//            }
//        });
//
//        displayGraph.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        displayGraph.setForeground(new java.awt.Color(255, 255, 255));
//        displayGraph.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\system_task_30px.png")); // NOI18N
//        displayGraph.setText("Display Graph");
//        displayGraph.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                displayGraphMouseClicked(evt);
//            }
//        });
//
//        findingRoutes.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        findingRoutes.setForeground(new java.awt.Color(255, 255, 255));
//        findingRoutes.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\search_30px.png"))); // NOI18N
//        findingRoutes.setText("Shortest Route");
//        findingRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                try {
//                    findingRoutesMouseClicked(evt);
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//
//        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
//        jLabel4.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\hint_30px.png"))); // NOI18N
//        jLabel4.setText("Suggestion");
//
//        suggesttionField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
//        suggesttionField.setForeground(new java.awt.Color(0, 51, 51));
//        suggesttionField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
//
//        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
//        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
//        jLabel5.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\keyboard_30px.png"))); // NOI18N
//        jLabel5.setText("Input Node");
//        jLabel5.addKeyListener(new java.awt.event.KeyAdapter() {
//            public void keyPressed(java.awt.event.KeyEvent evt) {
//                jLabel5KeyPressed(evt);
//            }
//        });
//
//        inputNodeField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
//        inputNodeField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
//        inputNodeField.addKeyListener(new java.awt.event.KeyAdapter() {
//            public void keyPressed(java.awt.event.KeyEvent evt) {
//                inputNodeFieldKeyPressed(evt);
//                getRootPane().setDefaultButton(jButton2);
//            }
//        });
//
//        jButton1.setForeground(new java.awt.Color(240, 240, 240));
//        jButton1.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\sign_language_h_30px.png"))); // NOI18N
//        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
//        jButton1.setRequestFocusEnabled(false);
//        jButton1.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton1ActionPerformed(evt);
//            }
//        });
//
//        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        jButton2.setForeground(new java.awt.Color(240, 240, 240));
//        jButton2.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\hand_right_25px.png"))); // NOI18N
//        jButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
//        jButton2.setOpaque(false);
//        jButton2.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton2ActionPerformed(evt);
//            }
//        });
//
//        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
//        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
//        jLabel1.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\checkmark_30px.png"))); // NOI18N
//        jLabel1.setText("Node Traversal");
//
//        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
//        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
//
//        member.setIcon(new javax.swing.ImageIcon(("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\images\\instagram_old_30px.png"))); // NOI18N
//        member.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                memberMouseClicked(evt);
//            }
//        });
//
//        javax.swing.GroupLayout nodeTravelLayout = new javax.swing.GroupLayout(nodeTravel);
//        nodeTravel.setLayout(nodeTravelLayout);
//        nodeTravelLayout.setHorizontalGroup(
//                nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGroup(nodeTravelLayout.createSequentialGroup()
//                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGroup(nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                        .addGroup(nodeTravelLayout.createSequentialGroup()
//                                                .addGap(29, 29, 29)
//                                                .addGroup(nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                                        .addComponent(browseFile)
//                                                        .addComponent(displayGraph)
//                                                        .addComponent(findingRoutes)
//                                                        .addComponent(jLabel4)
//                                                        .addComponent(suggesttionField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                        .addComponent(jLabel5)
//                                                        .addGroup(nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                                                                .addComponent(inputNodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                                .addGroup(nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                                                                        .addGroup(nodeTravelLayout.createSequentialGroup()
//                                                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                                                .addGap(25, 25, 25)
//                                                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                                                        .addComponent(jLabel1)
//                                                                        .addComponent(jTextField3))))
//                                                .addContainerGap(25, Short.MAX_VALUE))
//                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nodeTravelLayout.createSequentialGroup()
//                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                                                .addComponent(member))))
//        );
//        nodeTravelLayout.setVerticalGroup(
//                nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGroup(nodeTravelLayout.createSequentialGroup()
//                                .addGap(38, 38, 38)
//                                .addComponent(browseFile)
//                                .addGap(44, 44, 44)
//                                .addComponent(displayGraph)
//                                .addGap(45, 45, 45)
//                                .addComponent(findingRoutes)
//                                .addGap(46, 46, 46)
//                                .addComponent(jLabel4)
//                                .addGap(27, 27, 27)
//                                .addComponent(suggesttionField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(27, 27, 27)
//                                .addComponent(jLabel5)
//                                .addGap(20, 20, 20)
//                                .addComponent(inputNodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(28, 28, 28)
//                                .addGroup(nodeTravelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                                        .addComponent(jButton1)
//                                        .addComponent(jButton2))
//                                .addGap(31, 31, 31)
//                                .addComponent(jLabel1)
//                                .addGap(18, 18, 18)
//                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
//                                .addComponent(member))
//                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//        );
//
//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//        getContentPane().setLayout(layout);
//        layout.setHorizontalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addComponent(nodeTravel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//        );
//        layout.setVerticalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addComponent(nodeTravel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//        );
//
//        pack();
//    }// </editor-fold>
//    static List<List<Integer>> routes= new ArrayList<>();
//
//    // file name
//    private void browseFileMouseClicked(java.awt.event.MouseEvent evt) {
//        // TODO add your handling code here:
//        filename= null;
//        JFileChooser chooser= new JFileChooser();
//        chooser.setCurrentDirectory(new File("C:\\Users\\admin\\Dropbox\\project_inputtest"));
//        chooser.showOpenDialog(null);
//        File file=chooser.getSelectedFile();
//        filename= file.getAbsolutePath();
//    }
//
//    // back button
//    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//        // TODO add your handling code here:
//        inputNodeField.getText().replaceAll("\\s+","");
//        System.out.println(inputNodeField.getText());
//        if(!inputNodeField.getText().equals(" 1")){
//            Node node= graph.getNode((inputNodeField.getText()).replaceAll("\\s+",""));
//            node.setAttribute("ui.style","stroke-mode: plain;shape:circle;fill-color: yellow;size: 20px; text-alignment: center;");
//            Save.remove(Save.size()-1);
//            inputNodeField.setText((" "+Save.get(Save.size()-1)));
//
//            for (Map.Entry<Integer,List<Integer>> me : map.entrySet()) {
//                if(me.getKey().equals(Integer.parseInt(inputNodeField.getText().replaceAll("\\s+","")))){
//                    System.out.println("ok");
//                    suggesttionField.setText(String.valueOf(me.getValue()));
//                    System.out.println("suggestion:"+me.getValue());
//                    jTextField3.setText(String.valueOf(Save));
//                    break;
//                }
//            }
//        }else{
//            Node node= graph.getNode(String.valueOf(maxNode));
//            Node node1= graph.getNode(String.valueOf(1));
//            node1.setAttribute("ui.style",style);
//            node.setAttribute("ui.style",style);
//            suggesttionField.setText("");
//            inputNodeField.setText("");
//            jTextField3.setText("");
//            suggest.clear();
//            Save.clear();
//        }
//    }
//
//    // input node
//    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//        // TODO add your handling code here:
//        for (int index = 1; index < MAXN; index++)
//            point[index] = new Point();
//
//        try {
//            File myObj = new File(filename);
//            Scanner myReader = new Scanner(myObj);
//            while (myReader.hasNextLine()) {
//                String data = myReader.nextLine();
//                convert(data);
//            }
//            myReader.close();
//        } catch (FileNotFoundException e) {
//            System.out.println("An error occurred.");
//            e.printStackTrace();
//        }
//
//        trace[1]= -1;
//        DFS(1);
//
//        suggest= new ArrayList<>();
//
//        maxNode= routes.get(1).get(routes.get(1).size()-1);
//        Save.add(Integer.parseInt(getNumberNode.replaceAll("\\s+","")));
//        int Left, Right, left= -1, right=routes.size()- 1;
//        while(right- left> 1){
//            int middle= (right+ left)/ 2;
//            if(Comparable(middle)) left= middle;
//            else right= middle;
//        }
//        Left= right;
//        left= 0;
//        right= routes.size();
//        while(right- left> 1){
//            int middle= (right+ left)/ 2;
//            if(ReComparable(middle)) right= middle;
//            else left= middle;
//        }
//        Right= right;
//        suggest.clear();
//        int Pre= 0;
//        for(int index= Left; index< Right; index++) {
//            paths= routes.get(index);
//            if(paths.get(Save.size())!= Pre)
//            {
//                suggest.add(paths.get(Save.size()));
//                Pre= paths.get(Save.size());
//            }
//        }
//
//        suggesttionField.setText(String.valueOf(suggest));
//        map.put(Integer.parseInt(getNumberNode.replaceAll("\\s+","")),suggest);
//
//        Node node1= graph.getNode(getNumberNode);
//        node1.setAttribute("ui.style", "stroke-mode: plain;shape:circle;fill-color: rgb(204, 204, 255);size: 20px; text-alignment: center;");
//
//        Node node2= graph.getNode(String.valueOf(maxNode));
//        node2.setAttribute("ui.style", "stroke-mode: plain;shape:circle;fill-color: rgb(204, 204, 255);size: 20px; text-alignment: center;");
//        if(suggest.contains(maxNode)){
//            JOptionPane.showMessageDialog(null,"Finding routes successfully");
//            Save.add(maxNode);
////             for(int i=0;i<Save.size()-1;i++){
////                 System.out.println(Save.get(i)+""+Save.get(i+1));
////                 if(graph.getEdge(Save.get(i)+""+Save.get(i+1))!=null){
////                     graph.getEdge(12).setAttribute("ui.style","arrow-shape: arrow;fill-color :#32a852;");
////                 }
////             }
//        }
//        jTextField3.setText(String.valueOf(Save));
//    }
//
//    static String getNumberNode;
//    private void inputNodeFieldKeyPressed(java.awt.event.KeyEvent evt) {
//        // TODO add your handling code here:
//        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
//            getNumberNode=inputNodeField.getText();
//            getNumberNode= getNumberNode.replaceAll("\\s+","");
//        }
//    }
//
//
//    private void findingRoutesMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
//        // TODO add your handling code here:
//        for (int index = 1; index < MAXN; index++)
//            point[index] = new Point();
//
//        try {
//            File myObj = new File(filename);
//            Scanner myReader = new Scanner(myObj);
//            while (myReader.hasNextLine()) {
//                String data = myReader.nextLine();
//                convert(data);
//                // System.out.println(data);
//            }
//            myReader.close();
//        } catch (FileNotFoundException e) {
//            System.out.println("An error occurred.");
//            e.printStackTrace();
//        }
//
//        trace[1]= -1;
//        DFS(1);
////
//        // possible routes
//
//        String x="";
//        int ans= 1000000000;
//        for (List<Integer> a : Path) {
//            ans= Math.min(a.size(), ans);
//        }
//        for (List<Integer> a : Path) {
//            if(ans== a.size()){
//                for (Integer b : a){
//                    x+=b+" ";
//                    System.out.print(b);
//                }
//                break;
//            }
//        }
//        JOptionPane.showMessageDialog(null,"Shortest Route : "+x);
//
//        temp="";
//        System.out.println(temp);
//        temp="All of routes:"+Path.size()+"\n";
//        for(int i=0;i< Path.size();i++){
//            //temp+=Path.get(i)+"\n";
//            suggest= new ArrayList<>();
//            for(int j=0;j<Path.get(i).size()-1;j++){
//                suggest.add(Path.get(i).get(j));
//                temp+=Path.get(i).get(j)+" -> ";
//            }
//           // int minIndex = list.indexOf(Collections.min(list));
//            temp+=Path.get(i).get(Path.get(i).size()-1);
//            suggest.add(Path.get(i).get(Path.get(i).size()-1));
//            temp+="\n";
//            routes.add(suggest);
//        }
//            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new
//                    File("C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\output.txt")));
//            bufferedWriter.write(temp);
//            try
//            {
//                if(bufferedWriter != null)
//                    bufferedWriter.close();
//            }
//            catch (IOException e)
//            {
//                e.printStackTrace();
//            }
//
//    }
//         /**
//
//     * display graph after handling data     * @param evt
//     */
//         String data;
//         FileReader reader;
//    private void displayGraphMouseClicked(java.awt.event.MouseEvent evt) {
//        // TODO add your handling code here:
//        jPanel4.removeAll();
//        jPanel4.revalidate();
//        jPanel4.repaint();
//        jPanel4.setLayout(new GridLayout());
//         reader= new FileReader();
//        System.setProperty("org.graphstream.ui","swing");//
//        System.setProperty("org.graphstream.ui", "org.graphstream.ui.swing.util.Display");
//        graph.setStrict(false);
//        graph.setAutoCreate(true);
//
//        for(int i= 1; i< reader.MAXN; i++)
//            reader.point[i]= new Point();
//
//        data="";
//        try {
//            File myObj = new File(filename);
//            myReader = new Scanner(myObj);
//            while (myReader.hasNextLine()) {
//                data = myReader.nextLine();
//               // System.out.println(data);
//                reader.convert(data);
//                //System.out.println(data);
//            }
//            myReader.close();
//        } catch (FileNotFoundException e) {
//            System.out.println("An error occurred.");
//            e.printStackTrace();
//        }
//
//
//        // finding routes
//        for(int index= 1; index<= reader.NumberNode; index++){
//            Node e1;
//            graph.addNode(String.valueOf(index));
//            e1=graph.getNode(String.valueOf(index));
//            e1.setAttribute("ui.style", "stroke-mode: plain;shape:circle;fill-color: yellow;size: 20px; text-alignment: center;");
//            e1.setAttribute("ui.label", String.valueOf(index));
//            e1.setAttribute("ui.class","marked");
//            //e1.setAttribute("","layout.frozen");
//            for (Integer node : reader.point[index].getList()) {
//                Edge edge;
//                graph.addNode(String.valueOf(node));
//                e1=graph.getNode(String.valueOf(node));
//                e1.setAttribute("ui.style", "stroke-mode: plain;shape: circle;fill-color: yellow;size: 20px; text-alignment: center;");
//                e1.setAttribute("ui.label", String.valueOf(node));
//                graph.addEdge(index+""+node,String.valueOf(node),String.valueOf(index),true);
//                if(graph.getEdge(index+""+node)!=null){
//                    edge= graph.getEdge(index+""+node);
//                    edge.setAttribute("ui.style","arrow-shape: arrow;fill-color :#4f4340;");
//                }
//            }
//        }
//        graph.setAttribute("ui.antialias");
//        String styleSheet = "graph { padding: 20px; stroke-width: 0px; }"
//                + "node:selected { fill-color: red;  fill-mode: plain; }"
//                + "node:clicked  { fill-color: blue; fill-mode: plain; }"
//                + "node.marked        { fill-color: green, yellow, purple; fill-mode: dyn-plain; }";
//        graph.setAttribute(styleSheet);
//        SwingViewer viewer = new SwingViewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
//        ViewPanel viewPanel = (ViewPanel) viewer.addDefaultView(false);
//        jPanel4.add(viewPanel);
//        jPanel4.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));
//        nodeTravel.add(jPanel4,BorderLayout.WEST);
//        nodeTravel.add(jTextField3,BorderLayout.EAST);
//        nodeTravel.add(browseFile,BorderLayout.EAST);
//        nodeTravel.add(displayGraph,BorderLayout.EAST);
//        nodeTravel.add(findingRoutes,BorderLayout.EAST);
//        nodeTravel.add(jLabel4,BorderLayout.EAST);
//        nodeTravel.add(suggesttionField);
//        nodeTravel.add(inputNodeField,BorderLayout.EAST);
//        nodeTravel.add(jLabel5);
//        nodeTravel.add(jLabel1);
//        nodeTravel.add(jButton1);
//        nodeTravel.add(jButton2);
//        add(nodeTravel);
//
//        viewer.enableAutoLayout();
//
//        setVisible(true);
//    }
//
//
//    private void memberMouseClicked(java.awt.event.MouseEvent evt) {
//        // TODO add your handling code here:
//        graph.setAttribute("ui.screenshot","C:\\Users\\admin\\IdeaProjects\\OopsBigAssignment\\output.png");
//        JOptionPane.showMessageDialog(null,"save image successfully");
//    }
//
//    private void jLabel5KeyPressed(java.awt.event.KeyEvent evt) {
//        // TODO add your handling code here:
//    }
//
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GUI().setVisible(true);
//            }
//        });
//    }
//
//    // Variables declaration - do not modify
//    private javax.swing.JLabel browseFile;
//    private javax.swing.JLabel displayGraph;
//    private javax.swing.JLabel findingRoutes;
//    private javax.swing.JTextField inputNodeField;
//    private javax.swing.JButton jButton1;
//    private javax.swing.JButton jButton2;
//    private javax.swing.JLabel jLabel1;
//    private javax.swing.JLabel jLabel4;
//    private javax.swing.JLabel jLabel5;
//    private javax.swing.JPanel jPanel4;
//    private javax.swing.JTextField jTextField3;
//    private javax.swing.JLabel member;
//    private javax.swing.JPanel nodeTravel;
//    private javax.swing.JTextField suggesttionField;
//    // End of variables declaration
//}
